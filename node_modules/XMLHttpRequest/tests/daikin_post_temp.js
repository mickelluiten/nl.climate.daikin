const XMLHttpRequest = require("XMLHttpRequest").XMLHttpRequest;

function escapeRegExp(str) {
	return str.replace(/([.*+?^=!:${}()|\[\]\/\\]\")/g, "\\$1");
	// From https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#Using_Special_Characters
}

function replaceAll(str, find, replace) {
	return str.replace(new RegExp(escapeRegExp(find), 'g'), replace);
	// From http://stackoverflow.com/a/1144788
}

var target="http://192.168.0.63";
var request="POST";
var parameters="/aircon/set_control_info";
var temp = {pow: '0',
  mode: '4',
  stemp: '23',
  shum: '0',
  f_rate: 'A',
  f_dir: '0'};
/*var temp = { ret: 'OK',
  pow: '0',
  mode: '4',
  adv: '',
  stemp: '21.0',
  shum: '0',
  dt1: '25.0',
  dt2: 'M',
  dt3: '25.0',
  dt4: '21.0',
  dt5: '21.0',
  dt7: '25.0',
  dh1: 'AUTO',
  dh2: '50',
  dh3: '0',
  dh4: '0',
  dh5: '0',
  dh7: 'AUTO',
  dhh: '50',
  b_mode: '4',
  b_stemp: '21.0',
  b_shum: '0',
  alert: '255',
  f_rate: 'A',
  f_dir: '0',
  b_f_rate: 'A',
  b_f_dir: '0',
  dfr1: '5',
  dfr2: '5',
  dfr3: '5',
  dfr4: 'A',
  dfr5: 'A',
  dfr6: '5',
  dfr7: '5',
  dfrh: '5',
  dfd1: '0',
  dfd2: '0',
  dfd3: '0',
  dfd4: '0',
  dfd5: '0',
  dfd6: '0',
  dfd7: '0',
  dfdh: '0' };*/
var opts = JSON.stringify(temp);
console.log('string send to airco: ', opts);
var xmlhttp=new XMLHttpRequest();
xmlhttp.open(request,target + parameters,true);
xmlhttp.setRequestHeader('Content-Type','application/json');
//xmlhttp.setRequestHeader('charset','utf-8');
//xmlhttp.setRequestHeader('Content-type','text/csv');
//xmlhttp.setRequestHeader("Content-type","application/json");
//xmlhttp.setRequestHeader("Content-type","application/x-www-form-urlencoded");
//xmlhttp.setRequestHeader("charset","utf-8");
xmlhttp.onreadystatechange  = function () {
	if ( xmlhttp.readyState == 4 ){
        console.log('xmlhttp.responseText: ', xmlhttp.responseText);         
		if( xmlhttp.status==200 ){
        	console.log('readystate == 4');
            var response = replaceAll(xmlhttp.responseText, "\=", "\":\"");
        	response = replaceAll(response, ",", "\",\"");
            var responseData = JSON.parse("{\"" + response + "\"}");
            var ret = null;
            if (responseData.ret) {
                ret = responseData.ret;
                switch (responseData.ret) {
                    case 'OK':          delete responseData.ret;
                                        console.log('OK');
                                        break;
                    case 'PARAM NG':    delete responseData.ret;
                                        console.log('PARAM NG');
                                        break;
                    case 'ADV NG':      delete responseData.ret;
                                        console.log('ADV NG');
                                        break;
                    default:            console.log('Unknown response');
                                        break;
                }
            }
            else {
                console.log('Unknown response:');
            }           
            //var response = JSON.parse(xmlhttp.responseText);
		}else{
			console.log("Send control request failed !!", xmlhttp.status, "-");
		}
	}else{
		//alert(xmlhttp.readyState);
	}
}

//xmlhttp.send(JSON.stringify(opts));
xmlhttp.send(opts);


